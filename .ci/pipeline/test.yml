#
#   Copyright (C) 2014-2017 CASM Organization, https://casm-lang.org
#   All rights reserved.
#
#   Developed by: Philipp Paulweber
#                 Emmanuel Pescosta
#                 https://github.com/casm-lang/casm
#
#   This file is part of casm.
#
#   casm is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   casm is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with casm. If not, see <http://www.gnu.org/licenses/>.
#

---
resource_types:
- name: email
  type: docker-image
  source:
    repository: mdomke/concourse-email-resource

resources:
- name: send-email
  type: email
  source:
    from: casm-lang@casm-lang.org

# - name: fly-release
#   type: github-release
#   source:
#     user: concourse
#     repository: concourse
#     access_token: ((github-access-token}}

jobs:
  - name: test-email
    plan:
    - put: send-email
      params:
        to:
        - ppaulweber@gmail.com
        subject_text: |
          Test Subject
        body_text: |
          Test Body


# - name: Build-it
#   plan:
#   - get: fly-release
#     params:
#       globs:
#       - fly_linux_amd64
#     trigger: true
#   - task: do-your-build-task-here
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           echo "Output of build job. It gets automatically triggered by any changes in the resource."

# - name: Test-it
#   plan:
#   - get: fly-release
#     params:
#       globs:
#       - fly_linux_amd64
#     passed:
#       - Build-it
#     trigger: true
#   - task: do-your-test-task-here
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           echo "Output of test job. It gets automatically triggered after a successful Build-it job."
#   - task: prep-email-text
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       inputs:
#         - name: fly-release
#       outputs:
#         - name: email-text
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           export LATEST_GOOD_VERSION=$(cat ./fly-release/version)
#           echo "Version $LATEST_GOOD_VERSION is ready to ship!" >  ./email-text/email-subject.txt
#           echo "Version $LATEST_GOOD_VERSION is ready to ship! For details, see pipeline (( BUILD_PIPELINE_NAME }}, build (( BUILD_NAME }}, job (( BUILD_JOB_NAME }}." >  ./email-text/email-body.txt
#   - put: send-email
#     params:
#       to: [YOUR-EMAIL-GOES-HERE]
#       subject: ./email-text/email-subject.txt
#       body: ./email-text/email-body.txt

#   - task: update-ship-it-job-name
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       inputs:
#         - name: fly-release
#       outputs:
#         - name: email-text
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           export LATEST_GOOD_VERSION=$(cat ./fly-release/version)
#           mv ./fly-release/fly_linux_amd64 ./fly
#           chmod +x ./fly
#           ./fly -t local login -c ((concourse-url}} -n ((concourse-team}} #-u ((concourse-username}} -p ((concourse-password}}
#           ./fly -t local sync
#           ./fly -t local get-pipeline -p ((concourse-pipeline-name}} > ./original-pipeline.yml
#           sed "s/Ship-version-.*/Ship-version-$LATEST_GOOD_VERSION/" ./original-pipeline.yml > ./updated-pipeline.yml
#           ./fly -t local set-pipeline -p ((concourse-pipeline-name}} -c ./updated-pipeline.yml -n

# - name: Ship-version-2.6.0
#   plan:
#   - get: fly-release
#     params:
#       globs:
#       - fly_linux_amd64
#     passed:
#       - Test-it
#     trigger: false
#   - task: do-your-shipit-task-here
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           echo "Output of your manually triggered Ship-it task."

# - name: Deploy-and-AT-it!
#   plan:
#   - get: fly-release
#     params:
#       globs:
#       - fly_linux_amd64
#     passed:
#       - Ship-version-2.6.0
#     trigger: true
#   - task: do-your-deploy-and-AT-tasks-here
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           echo "Output of your Deploy and AT tasks."
#   - task: prep-email-text
#     config:
#       platform: linux
#       image_resource:
#         type: docker-image
#         source:
#           repository: concourse/buildroot
#           tag: "git"
#       inputs:
#         - name: fly-release
#       outputs:
#         - name: email-text
#       run:
#         path: sh
#         args:
#         - -exc
#         - |
          
#           export LATEST_GOOD_VERSION=$(cat ./fly-release/version)
#           echo "Version $LATEST_GOOD_VERSION deployed and tested!" >  ./email-text/email-subject.txt
#           echo "Version $LATEST_GOOD_VERSION has been deployed and tested successfully! For details, see pipeline (( BUILD_PIPELINE_NAME }}, build (( BUILD_NAME }}, job (( BUILD_JOB_NAME }}." >  ./email-text/email-body.txt
#   - put: send-email
#     params:
#       to: [YOUR-EMAIL-GOES-HERE]
#       subject: ./email-text/email-subject.txt
#       body: ./email-text/email-body.txt

